openapi: 3.0.0
info:
  title: Express API with Swagger
  version: 1.0.0
  description: A simple Express API application
servers:
  - url: http://localhost:5000
    description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Expense:
      type: object
      required:
        - description
        - amount
      properties:
        _id:
          type: string
          example: '60c72b2f9b1d8e2f8c4f91e9'
        userId:
          type: string
          example: '60c72b2f9b1d8e2f8c4f91e9'
        description:
          type: string
          example: Grocery Shopping
        amount:
          type: number
          example: 100
        date:
          type: string
          format: date-time
          example: '2024-07-04T10:00:00Z'
    Budget:
      type: object
      required:
        - category
        - amount
        - startDate
        - endDate
      properties:
        _id:
          type: string
          example: '60c72b2f9b1d8e2f8c4f91e9'
        userId:
          type: string
          example: '60c72b2f9b1d8e2f8c4f91e9'
        category:
          type: string
          example: Food
        amount:
          type: number
          example: 500
        startDate:
          type: string
          format: date-time
          example: '2024-07-01T00:00:00Z'
        endDate:
          type: string
          format: date-time
          example: '2024-07-31T23:59:59Z'
    User:
      type: object
      required:
        - username
        - email
        - password
      properties:
        _id:
          type: string
          example: '60c72b2f9b1d8e2f8c4f91e9'
        username:
          type: string
          example: testuser
        email:
          type: string
          example: testuser@example.com
        password:
          type: string
          example: password123
security:
  - bearerAuth: []
tags:
  - name: Auth
    description: Authentication and user management
  - name: Expenses
    description: Expense management
  - name: Budgets
    description: Budget management
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: testuser
                email:
                  type: string
                  example: testuser@example.com
                password:
                  type: string
                  example: password123
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
        400:
          description: Invalid input
        500:
          description: Internal server error
  /auth/login:
    post:
      summary: Login a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: testuser@example.com
                password:
                  type: string
                  example: password123
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        400:
          description: Invalid credentials
        500:
          description: Internal server error
  /expenses:
    get:
      summary: Get all expenses
      tags: [Expenses]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of all expenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
        500:
          description: Internal server error
    post:
      summary: Add a new expense
      tags: [Expenses]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
            examples:
              example:
                value:
                  description: Grocery Shopping
                  amount: 100
                  date: 2024-07-04T10:00:00Z
      responses:
        201:
          description: Expense created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        400:
          description: Invalid input
        500:
          description: Internal server error
  /expenses/{id}:
    put:
      summary: Update an expense
      tags: [Expenses]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Expense ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
      responses:
        200:
          description: Expense updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        400:
          description: Invalid input
        404:
          description: Expense not found
        500:
          description: Internal server error
    delete:
      summary: Delete an expense
      tags: [Expenses]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Expense ID
      responses:
        200:
          description: Expense deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Expense deleted successfully
        404:
          description: Expense not found
        500:
          description: Internal server error
  /budgets:
    get:
      summary: Get all budgets
      tags: [Budgets]
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of all budgets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Budget'
        500:
          description: Internal server error
    post:
      summary: Add a new budget
      tags: [Budgets]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
            examples:
              example:
                value:
                  category: Food
                  amount: 500
                  startDate: 2024-07-01T00:00:00Z
                  endDate: 2024-07-31T23:59:59Z
      responses:
        201:
          description: Budget created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        400:
          description: Invalid input
        500:
          description: Internal server error
  /budgets/{id}:
    put:
      summary: Update a budget
      tags: [Budgets]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Budget ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
      responses:
        200:
          description: Budget updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        400:
          description: Invalid input
        404:
          description: Budget not found
        500:
          description: Internal server error
    delete:
      summary: Delete a budget
      tags: [Budgets]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Budget ID
      responses:
        200:
          description: Budget deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Budget deleted successfully
        404:
          description: Budget not found
        500:
          description: Internal server error
  /reports/monthly:
    get:
      summary: Get monthly report
      tags: [Reports]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Monthly report generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalExpenses:
                    type: number
                    example: 1000
                  totalBudgets:
                    type: number
                    example: 5000
        500:
          description: Internal server error
  /reports/yearly:
    get:
      summary: Get yearly report
      tags: [Reports]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Yearly report generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalExpenses:
                    type: number
                    example: 12000
                  totalBudgets:
                    type: number
                    example: 60000
        500:
          description: Internal server error
